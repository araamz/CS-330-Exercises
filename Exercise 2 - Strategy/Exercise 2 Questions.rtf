{\rtf1\ansi\ansicpg1252\cocoartf2632
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f0\fs22 \cf0 Team: Team 09\
Names: Araam Zaremehrjardi, Heriberto Martinez \
Date: 08/31/2021\
Assignment: Exercise 2 \'96 Strategy Pattern \
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f1\b \cf0 \
Assignment 1\
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f0\b0 \cf0 Limitations associated with the code is the tightly coupled classes due to inheritance. The attack() method inherited from the GameUnit classes to its derived classes are hard implementations. Issues arising from this method prompts difficulty of maintaining different attacks for different entities in the game leading to major code duplication needing to be used for creating the same attacks for different derived classes. This means if behaviors were to be the same with minor changes between two different entities, most of the same attack methods need to be duplicated with the minor changes implemented to each different entities\'92 classes. This during run-time too prompts difficulties for entities as they can\'92t easily their behaviors without having specialized attack or moving classes. This overall prompt an inflexible design model that makes creating new behaviors for multiple entities to use inefficient. \
\
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f1\b \cf0 Assignment 5\
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f0\b0 \cf0 The three different principles of Objected Oriented Design Principles are incorporated within the application being inheritance, encapsulation, and polymorphism. Inheritance is implemented for entities in the game being grunt and tank. Both grunt and tank inherit variables (movingBehavior, attackingBehavior) and methods (unitAttack, unitMove, setAttack, setMove) from GameUnit. Encapsulation is used for encapsulating each different behavior in the application making them independent from one and another. Polymorphism is utilized by GameUnit\'92s unitMove() and unitAttack() methods for changing the behavior of the moving() method based upon the variable passed for movingBehavior taking advantage of MovingBheavior interface.  \
\
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f1\b \cf0 Assignment 6\
\pard\pardeftab720\ri0\sl259\slmult1\partightenfactor0

\f0\b0 \cf0 A disadvantage of implementing the strategy pattern is that you need to create a new class for each new kind of behavior. For example, for the moving behavior, if you want to create a walking behavior, then you need to create a new class movingBehavior_walking class.\
\
 \
}